# process settings
fork=yes
children=2

# uncomment for debug
# fork=no
# children=1

# logging and debug settings
debug=<%= debug_level %>
log_stderror=no
log_facility=<%= log_facility %>

# network settings
disable_tcp=yes
listen=udp:<%= listen_ip %>:<%= listen_port %>

#set module path
mpath="<%= module_path %>"

user=<%= user %>
group=<%= group %>

loadmodule "db_mysql.so"
loadmodule "signaling.so"
loadmodule "sl.so"
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "dialog.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "sipmsgops.so"
loadmodule "mi_fifo.so"
loadmodule "uri.so"
loadmodule "auth.so"
loadmodule "auth_db.so"
loadmodule "nathelper.so"
loadmodule "alias_db.so"
loadmodule "rtpengine.so"
loadmodule "avpops.so"
loadmodule "pike.so"
loadmodule "domain.so"
loadmodule "enum.so"
loadmodule "stun.so"

# ---- tm params ----
# enable transactional avps
modparam("tm", "onreply_avp_mode", 1)

# ---- fifo params ----
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")

# ---- record route params ----
# do not append from tag to the RR.  This is used to help determine
# signaling direction (upstream/downstream) which we do not need
modparam("rr", "append_fromtag", 0)

# ---- registrar params ----
modparam("registrar", "received_avp", "$avp(received)")
modparam("registrar", "attr_avp", "$avp(attr)")

# ---- nathelper params ----
modparam("nathelper","natping_interval", 15)
modparam("nathelper", "received_avp", "$avp(received)")

# ---- dialog params ----
modparam("dialog", "db_mode", 1)
modparam("dialog", "db_url", "<%= dialog_db_url %>")

# ---- user location params ----
modparam("usrloc", "db_mode", 2)
modparam("usrloc", "db_url", "<%= usrloc_db_url %>")

# when a UAC sends nated register set a branch flag before saving.
# when lookup is called, usrloc will restore the branch flag and let us
# detect a nated "callee" or UAS
modparam("usrloc", "nat_bflag","uasnat")
# use the domain portion to match users - not just the user portion
modparam("usrloc", "use_domain",1)

# ---- alias params ----
modparam("alias_db", "db_url", "<%= alias_db_url %>")
modparam("alias_db", "append_branches", 1)

# ---- auth params ----
modparam("auth_db", "calculate_ha1", 0)
modparam("auth_db", "password_column", "ha1")
modparam("auth_db", "db_url", "<%= auth_db_url %>")
modparam("auth_db", "load_credentials", "")
modparam("auth_db", "use_domain", 1)

# ---- avpops params ----
modparam("avpops", "db_url", "<%= avp_db_url %>")
modparam("avpops","use_domain",1)

# ----- pike params ----
modparam("pike", "sampling_time_unit", 10)
modparam("pike", "reqs_density_per_unit", 30)
modparam("pike", "remove_latency", 3600)

# ----- domain params ----
modparam("domain", "db_url", "<%= domain_db_url %>")

# we load the stun module primarily to keep logs free of parse errors on stun packets
modparam("stun","primary_ip","<%= listen_ip %>")
modparam("stun","primary_port","<%= listen_port %>")
# it requires an alternate ip, just fake it if you dont have a secondary public ip
modparam("stun","alternate_ip","127.0.0.1")
modparam("stun","alternate_port","6050")

# ----- rtpengine params ----
modparam("rtpengine", "rtpengine_sock", "udp:<%= listen_ip %>:60000")

# branch flags
# ------------
# uasnat - UAS behind nat

# avps
# ------------
# uacnat - transactional avp for detecting UAC behind nat on response

# routes
# ------
# route                        - general request processing
# route["initial_requests"]    - initial request route processing          
# route["sequential_requests"] - sequential request route processing          

# main request routing logic
route{
  # you can choose to enable, or disable enum lookups by setting this to 1 or 0
  $var(use_enum)=<%= use_enum %>;

  # use variables in the xlog to make log output "standardized" in spacing
  $var(request_log)="route                     :";

  # some scanner mitigation
  
  # check to see if the src ip is flooding us and drop requests accordingly
  if (!pike_check_req()) { exit; }
  # if the packet contains sipviscious or freindly-scanner drop it
  if(search("sipvicious") || search('freindly-scanner') || search('VaxSip')) { exit;}

  # kill any requests that we do not handle
  if (!is_method("UPDATE|PRACK|SUBSCRIBE|NOTIFY|REGISTER|INVITE|ACK|BYE|CANCEL|REFER|OPTIONS|INFO|MESSAGE")) {
    sl_send_reply("405","Method Not Allowed");
    exit;
  }

  # we do not handle any subscriptions locally
  if (is_method("SUBSCRIBE") && uri == myself) {
    sl_send_reply("405","Method Not Allowed");
    exit;
  }

  # kill anything that is looping
  if (!mf_process_maxfwd_header("10")) {
    sl_send_reply("483","Too Many Hops");
    exit;
  }

  # record route all requests b/c it doesn't hurt, and some
  # UA are buggy and throw away route sets
  if (!is_method("REGISTER")) {
    record_route();
  }

  # setup avp for detecting uac behind a nat in the response
  $avp(uacnat)=0;

  # UAC nat detection
  # 
  #  nat_uac_test(flags)
  #
  #  Tries to guess if client's request originated behind a nat. The parameter determines what heuristics is used.
  #
  #  Meaning of the flags is as follows:
  #
  #  1 - Contact header field is searched for occurrence of RFC1918 / RFC6598 addresses.
  #
  #  2 - the "received" test is used: address in Via is compared against source IP address of signaling
  #
  #  4 - Top Most VIA is searched for occurrence of RFC1918 / RFC6598 addresses
  #
  #  8 - SDP is searched for occurrence of RFC1918 / RFC6598 addresses
  #
  #  16 - test if the source port is different from the port in Via
  #
  #  32 - address in Contact is compared against source IP address of signaling
  #
  #  64 - Port in Contact is compared against source port of signaling 
  #
  #  All flags can be bitwise combined, the test returns true if any of the tests identified a NAT. 
  #
  #  We are using 1,2,32
 
  #  We are also checking to see if a Record-Route header is present.  We only want to do contact rewriting for
  #  user agents that are "local" to us, aka immediately adjacent not using other proxy servers and not IPv6
  if ( af != INET6 && !is_present_hf("Record-Route") && nat_uac_test("35")) {
    xlog("L_NOTICE","$var(request_log) $cs: $rm: received request from uac behind nat\n");
    # append recieved and port to first via so we can route responses back
    force_rport();
    # set a transactional avp letting us know that the uac is behind a nat
    $avp(uacnat)=1;
    if (is_method("REGISTER")) {
      fix_nated_register();
    } else {
      fix_nated_contact();
      # this helps us know if the UAS (requested destination) in a 
      # sequential request is behind a nat
      search_append('Contact:.*sip:[^>[:cntrl:]]*', ';nat=yes');
    }
  }

  # handle rtp proxying for both initial and sequential requests
  if ( (is_method("INVITE") || is_method("ACK")) && has_body("application/sdp") ) {
    if( is_method("ACK") ){
      xlog("L_NOTICE","$var(request_log) $cs: $rm: rtpengine answer\n");
      rtpengine_answer("replace-session-connection ICE=remove");
    } else {
      rtpengine_offer("replace-session-connection ICE=remove");
      xlog("L_NOTICE","$var(request_log) $cs: $rm: rtpengine offer\n");
    }
  }
  
  # we will hand off to either initial or sequential request processing blocks
  # that will return and continue executing the code after this if/else

  # initial request processing
  if (!has_totag()) {
    route("initial_requests");
  }
  # sequential request processing
  else {
    route("sequential_requests");
  }
  
  # set onreply_route[1] b/c transactional avp's are not present in onreply_route[0]
  t_on_reply("reply");

  # all processing has been completed, t_relay to the next hop
  if (!t_relay()) {
    sl_reply_error();
  };
  exit;
} 

# process initial requests
route["initial_requests"] {
  $var(request_log)="route[initial_requests]   :";
  if(!is_method("REGISTER|OPTIONS")){
    xlog("L_NOTICE","$var(request_log) $cs: $rm: received initial request to $ru\n");
  }
  # preloaded route checking
  if (loose_route() && !is_method("ACK|CANCEL")) {
    xlog("L_NOTICE","$var(request_log) $cs: $rm: initial request with preloaded routes [$fu/$tu/$ru/$ci] - rejecting\n");
    sl_send_reply("403","Preload Route denied");
    exit;
  }
  
  # we only accept requests to a user, not to a server
  if ($rU==NULL && !is_method("REGISTER|OPTIONS")) {
    # request with no Username in RURI
    sl_send_reply("484","Address Incomplete");
    exit;
  }
  
  # handle registrations
  if (is_method("REGISTER")) {
    # authenticate the REGISTER requests, do not challenge domains that are "unauthorized"
    if (is_from_local("$var(attrs)")) {
       if($var(attrs)=="noauth")
         $avp(unauthorized)=0;
    }

    if($avp(unauthorized)==0){
      if (!www_authorize("", "subscriber")) {
        www_challenge("", "0");
        exit;
      }
      # make sure they are registering a legitimate AOR, not just using correct auth credentials 
      if (!db_check_to()) {
        xlog("L_NOTICE","$var(request_log) $cs: $rm: attempt to register with bad To header\n");
        sl_send_reply("403","Forbidden auth ID");
        exit;
      }
    }  
    # We have authorized a UAC, now if they are behind a NAT, we need to 
    # set the nat branch flag before we save.  This will then be restored
    # on a call to lookup, allowing us to detect a NAT'd UAS or "callee" in
    # a branch route, or onreply route.  In any "main route" the bflag will be 
    # for the first branch if there is more than one.
    if ($avp(uacnat)==1) {
      setbflag(uasnat);
    }
    # comment out registration saving to reduce logs
    # xlog("L_NOTICE","$var(request_log) $cs: $rm: saving registration for $tu\n");
    if (!save("location","p0v")) {
      sl_reply_error();
    } 
    exit;
  }

  # CANCEL processing
  if (is_method("CANCEL") && t_check_trans()) {
    # if this is a CANCEL with an associated transaction
    # just let the main route block t_relay
    return;
  } else if (is_method("CANCEL") && !t_check_trans()) {
    # drop CANCEL requests that have no associated transaction
    exit;
  }

  # create dialog
  if (is_method("INVITE")) {
    create_dialog();
  }
  xlog("L_NOTICE","$var(request_log) $cs: $rm: fU=$fU fd=$fd rU=$rU\n");

  # Initial INVITE processing
  # 
  # We authenticate the user for any INVITE that is to an external domain
  # what does this mean of calling?
  # 
  # PSTN - This proxy has no "built in" pstn termination.  We only standardize numbers to e.164 format
  #        from there we will do ENUM lookups on e.164.arpa and e.164.org.  Either of those look ups
  #        could succeed and change the RURI to be an external domain, at which point we will challenge
  #        the request user to authenticate that they are a user of this proxy.  If a user wants to
  #        terminate calls to the pstn, they must add translations to a carrier - see the next section.
  #
  # TRANSLATIONS - All initial INVITE requests will have alias mapping, and then translations applied.
  #                If a user wants to send calls to a SIP carrier for termination, they must add a
  #                translation that will match the request user portion of the RURI, then apply an
  #                appropriate strip/prefix/translation domain for the carrier.
  #                Be aware that if a e.164 number is detected without the + prefix, the + will be 
  #                appended AUTOMATICALLY before the translation lookup.
  # 
  # SIP  - we only openly accept un-authenticated INVITE requests to this proxy with a domain that we service
  #        AKA we are the last hop to a subscriber.  This is determined by the domains stored in the domain
  #        table and will be checked by is_host_uri_local()
  #
  # PROCESS - look up any alias, then apply any matching  translation.  If at this point the domain 
  #           is external, authenticate.  if the domain is local, we can proceed to doing a user 
  #           location lookup, and pass the call.

  if (method=="INVITE" || method=="MESSAGE" || method=="NOTIFY") {
    #  match e.164 numbers that may or may not be prefixed with +
    #  add the + prefix if it is missing, then do an ENUM lookup
    #
    #           ( Domestic +1 NPA NXX XXXX matching     )  ( + CC Number  international )  
    #             +  1  N     PA      N   XX     XXXX     |  +  N  XXXXXXXXXXXXX
    if($rU =~ "^(\+?(1[2-9][0-9]{2}[2-9][0-9]{2}[0-9]{4})|(\+?[2-9][0-9]{6,14}))$"){
      if(!($rU=~"^\+")){
        # this is a phone number that is missing the e.164 + prefix, so prepend it
        $rU="+"+$rU;
        xlog("L_NOTICE","$var(request_log) $cs: $rm: standardized request to e.164 $rU\n");
      }
    }
    
    # check to see if the request has an alias (this will be depricated)
    if(alias_db_lookup("dbaliases","d")){
      xlog("L_NOTICE","$var(request_log) $cs: $rm: applied alias $ru\n");
    }

    # if this is an e.164 number, do an ENUM lookup on it 
    $var(is_enum)=0;
    if($var(use_enum)==1 && $rU =~ "^(\+(1[2-9][0-9]{2}[2-9][0-9]{2}[0-9]{4})|(\+[2-9][0-9]{6,14}))$"){
      xlog("L_NOTICE","$var(request_log) $cs: $rm: doing enum lookup on e164.arpa and e164.org\n");
      if(enum_query() || enum_query("e164.org.")){
        xlog("L_NOTICE","$var(request_log) $cs: $rm: ENUM query set RURI=$ru\n");
        $var(is_enum)=1;
      }
    }
 
    # outbound routing translations
    if($var(is_enum)==0 && avp_db_query("select tran_strip, tran_prefix, tran_user, tran_domain, tran_add_header from translations where (from_username='$fU' or from_username IS NULL) and from_domain='$fd' and ('$rU' regexp match_regex or match_regex IS NULL) order by tran_priority limit 1","$avp(tran_strip);$avp(tran_prefix);$avp(tran_user);$avp(tran_domain);$avp(tran_add_header)"))
    {
  
      # if there is a full on user part replacement
      # we do that, and do no strip/prefix
      if($avp(tran_user)!=null) {
        $rU=$avp(tran_user);
      }
      else {
        # if a translation strip exists, apply it before prefixing
        if($avp(tran_strip)!=null) {
          $rU = $(rU{s.substr, $(avp(tran_strip){s.int}), 0});
        }
        # apply any translation prefix that exists
        if($avp(tran_prefix)!=null) {
          $rU= $avp(tran_prefix)+$rU;
        }
      }

      # translation domain is all or nothing, no partial substitution
      if($avp(tran_domain)!=null) {
        $rd=$avp(tran_domain);
      }

      if($avp(tran_add_header)!=null) {
        append_hf("$avp(tran_add_header)");
      }

      xlog("L_NOTICE","$var(request_log) $cs: $rm: tran_strip=$avp(tran_strip) tran_prefix=$avp(tran_prefix) tran_user=$avp(tran_user) tran_domain=$avp(tran_domain) tran_add_header=$avp(tran_add_header)\n"); 
      xlog("L_NOTICE","$var(request_log) $cs: $rm: post translation RURI=$ru\n");
    }
   
     
    #  ok we have done aliasing, translations, and ENUM lookup now check to see what the domain is 
    if (is_uri_host_local()) {
      # this is a local domain, do a user location lookup 
      $var(original_ruri)=$ru;
      if (!lookup("location","m") ) {
        xlog("L_NOTICE","$var(request_log) $cs: $rm: no registration found for $rU - sending 404\n");
        t_newtran();
        t_reply("404", "Not Found");
        exit;
      } else {
        xlog("L_NOTICE","$var(request_log) $cs: $rm: found registration for $var(original_ruri)\n");
      }
    } else { 
      
      # challenge requests to external domains
      if($avp(unauthorized)==0){
        if (!proxy_authorize("", "subscriber")) {
          xlog("L_NOTICE","$var(request_log) $cs: $rm: challenging request to external domain $rd\n");
          proxy_challenge("", "0");
          exit;
        } else {
          # caller authorized
          xlog("L_NOTICE","$var(request_log) $cs: $rm: authorized request\n");
          consume_credentials();
        }
        # check to see if the from header is one of our known users 
        if (!db_check_from()) {
          xlog("L_NOTICE","$var(request_log) $cs: $rm: unknown user in From header - rejecting\n");
          sl_send_reply("403","Forbidden auth ID");
          exit;
        }
      }
    }
  } 
  # return to main route block for rtp proxying and t_relay
  return;
}

# process sequential requests
route["sequential_requests"] {
  $var(request_log)="route[sequential_requests]:";
  xlog("L_NOTICE","$var(request_log) $cs: $rm: received sequential request\n");

  # UAS NAT detection
  # we append ;nat=yes to the contact when we detect NAT on a UAC.  if this
  # paramater is present in the RURI of a sequential request, it means that
  # that the UAS of this request is behind a NAT, and we should set bflag 1 
  # to indicate that for the remainder of the transaction
  if (subst_uri('/(sip:.*);nat=yes/\1/')) {
    xlog("L_NOTICE","$var(request_log) $cs: $rm: uas is behind a nat (previously detected)\n");  
    setbflag(uasnat);
  }

  # sequential requests should take the path built up from record-routing
  if (loose_route()) {
    xlog("L_NOTICE","$var(request_log) $cs: $rm: loose routing\n");
  } else {
    if ( is_method("ACK") ) {
      if (! t_check_trans() ) {
        # ACK without matching transaction
        # ignore and discard
        exit;
      } else {
        # ACK to a negative response (wont loose route) - just let the main route t_relay
        xlog("L_NOTICE","$var(request_log) $cs: $rm: received ACK to negative response - relaying\n");
      }
    }else if ( uri != myself ) {
    # some other sequential request that is bogus
      xlog("L_NOTICE","$var(request_log) $cs: $rm: received bogus sequential request - sending 404\n");
      sl_send_reply("404","Not here");
      exit;
    }
  }
  return;
}

onreply_route["reply"] {
  $var(request_log)="onreply_route             :";
  xlog("L_NOTICE","$var(request_log) $cs: $rs: response\n");

  # handle rtp proxying for responses
  if ( has_body("application/sdp") ) {
    if ( $rs=="183" ) {
      xlog("L_NOTICE","$var(request_log) $cs: $rm: rtpengine offer\n");
      rtpengine_offer("replace-session-connection ICE=remove");
    } else if ( $rs=="200" ) {
      xlog("L_NOTICE","$var(request_log) $cs: $rm: rtpengine answer\n");
      rtpengine_answer("replace-session-connection ICE=remove");
    }
  }


  if (isbflagset(uasnat)) {
    xlog("L_NOTICE","$var(request_log) $cs: $rs: uas behind nat (previously detected), fixing contact\n");
    fix_nated_contact();
  }
  else if (nat_uac_test("1")) {
    xlog("L_NOTICE","$var(request_log) $cs: $rs: uas behind nat, fixing contact\n");
    fix_nated_contact();
  }
}
